#ifndef _PROBABILISTIC_OSL
#define _PROBABILISTIC_OSL

#define HISTOGRAM_SIZE 0x3ffff // ie 4 [m] rescaled with 0x10000
#define HISTOGRAM_BIN_SIZE 0x2000 // 4/32 [m] represent the size of the square bins of the histogram
#define POSL_MAX_DECENTERED 0x400000 // distance max from the robot to the center of particles before recentering
#define POSL_PARTICLE_UNCERTAINTY 0x1FFF // max uncertainty on the particles position is +/- 0.125 [m] rescaled with 0x10000

// Data structure
struct sPOSL {
	struct {
		struct {
			int x_16b;							// [m]
			int y_16b;							// [m]
			unsigned int weight;				// no unit, but usually kept around 0x10000
			unsigned int weight_prediction;		// weight used for evaluation
		} item[1024];							// Note that using more than 1024 particles would require changing functions that sum over all particles
		int count;
		int redistribution_index;
	} particles;

	struct {
		struct {
			int x_15b;			// Position of the target, relative to robot position + heading
			int y_15b;
			int speed_left;		// Robot wheel speed if target is selected
			int speed_right;
			struct {
				int x_16b;
				int y_16b;
				unsigned int quality_16b32;	// Quality (similar to entropy but easier to calculate, higher = better)
			} evaluation;
		} item[1024];
		int count;
		struct {
			int index;
			unsigned int quality_16b32;
		} best;
	} targets;
};

// Data structure instance
extern struct sPOSL posl;

// BEGIN - GENERATED BY C-UPDATE-HEADER
void posl_init(int particle_count, int target_distance_16b, int target_differential);
// Recenters the particles so that the robot is always around (0, 0)
void posl_particles_recenter();
// Adds uncertainty to the particle positions
void posl_particles_add_uncertainty();
// Adds an observation and normalizes the particles. The observation is done via the odor sensor feedback and knowing the robot position
void posl_add_observations();
// Evaluates the current situation to decide where to go next
void posl_evaluate();
// Calculates the probability of getting a hit at a location.
unsigned int posl_hit_probability_16b(int x_16b, int y_16b);
// Adds a potential observation. It means calculate the most probable observation at each target knowing the actual weight of the particles
void posl_add_observation_prediction(int x_16b, int y_16b, unsigned int in_plume);
// Calculates the quality based on the weight_prediction field.
unsigned int posl_quality_prediction_16b32();
// Prints all particles.
void posl_report_particles();
// END - GENERATED BY C-UPDATE-HEADER

#endif
